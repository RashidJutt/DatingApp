Learning Is Power 

Learning Angular and Asp.net core
Repository pattron:
repository comes in between datasourse layer and the business layer,
qurey data ,map data to business entity ,prisist changes in business
 entity to the data sourse

 two parts interface and concrete implementation of that interface 
 
 then we have create IAuthRepository interface 
 
 we use System.Security.Cryptography.HMACSHA512()  
 gives HMACSHA512 class object method to generate password
 we call ComputeHash method to gnerate password 
 computeHash takes UTF8 encoded bytes of password 
 we use system.encoding.UTF8.GetBytes method to encode string to byte[] 
 [If we are using apicontroller attribute we must use attribute routing rather 
 then conventional routing  ]
 
 Controller base class gives access to the httpresponses and action result 
 
 we specify path in HttPost attribute 
 
 if use not exit we return BadRequrest with error user already exist 
 in ControllerBase class we have BadRequrest method that we use to return bad request 
 error
 we return succes message to caller 
 CreatedAtRout of base class allow to send success message 
 we need to send the location of newly created entity 
 we send StatusCode of 201 
 
 API controller attribute automatically Bind form data to model we not need to specify form body
 
 we need to configure debugger to select .net core console attach and then attach the process 
APi controller attribute automatically validate the model and send bad request with 
validation errors 

Jwt Token 
Self contian data 
contain claims credential and 
server does not need to go to the database to validate the user 

Structue of JWT:
Header contain algorithen and the athuntication scheme
Payload contain information about user id name role isd expdate errorInterceptor
Secret contain hash of header and pay load + secret store on the server 

client send token to the server and server use that token to validate the request 
we check if user is exist and has vaild pass word if not we return unAuthorize response 
we have UnAuthorize method in base class 

Crating Token 
first we need to create Array of claims Claims are present in System.Security.Claims 
we have ClaimTypes that contain default Claim keys 
ClaimsType.NameIdentifier we send Id name for user 
Cliam is key value pair of string type 

second thing we need is key 
our key SymmectricSecurityKey That is in Microsoft.IdentityMOdel.tokens 
SymmetricSecurityKey constructor need byte array we convert string of key to byte array 
through Encoding.UTF8.GetBytes method
we need to store key in our AppSetting file 
we use _config.GetSection method and pass it key 

Third thing we need is SigningCredentials 
SigningCredentials Constructor takes SymmetricSecurityKey and algorithem as parameter 
We have Algorithems defined in SecurityAlgorithems class 

4th thing we need is Security Token Descriptor 
we have SecurityTokenDescriptor class It has property subject of type ClaimsIdentity whose const
takes claims array as argument 
then we tell when our token is going to expire   
Expire:property get that 
third property we need to supply is SigningCredentials =creds

5th thing we need is token handler we have JWTSecurityTokenHandler for that purpose
that is in System.IdentityModel.Token.jwt
we create object of JWTTokenHandler call CreateToken Method that take Discriptor as argument and provide us JWT Token 

after that we return new object and write token in that object in token property with 
handler.WriteToken Method that take token generated by handle method 

we use Authentication meddleware to authorize the use in our class 

we need authenticaton as service so we need to tell asp.net core what kind of athuntication we are going to use  

we call UseAthuntication() methos and pass JwtBearerDefaults.AthunticationScheme this is available in
 Microsoft.Aspnetcore.Athuntication.JwtBearerDefaults
then we need to call AddJwtBearer() it takes lamda epression as parameter that provide options object 
it has TokenValidationParameters property to  that we need to provide TokenValidationParameters object which have 
ValidateIssuerSigningKey =true, IssurSigningKey=new SymmetricSecurityKey(Encoding.ESCI.GetBytes(key))
validate issuer and validateaudience to false 
now we have configured aur authentication we need to tell asp to use this by calling use athuntication method

in the production we encrypt the token with Https and certificates 


Angular Security part :

we need to create service and create login() method that return token to us we save that token in localStorage

we have dropdown-divider class to devide dropdowns 
we have text -light for lighter color and fa fa-user 

!! marks return true or false value 
in the case of register method we just call post request and we simply subscribe to it and display user register message 

Handling Error globaly in our API:
asp provide GlobelExceptionHandler to handle the Exception 
UserExceptionHandler
its constructor provide us IApplicationBuilder we call run method 
run adds meddleware delegate to applicaton request pipeline
run metod provide httpContext object 

with which we set response.StatusCode=(int)HttpStatusCodes.InterservalError; using System.net  

then we get the error that is in reqest.Features.Get<IExceptionHandlerFeature>() =>Microsoft.Aspnetcore.Diagnostics 
if(error!=null ){
    await context.response.writeAsync(error.Error.Message);=>Microsoft.Aspnetcore.Http
}
WriteAsync() write error message to http response 
we add extention method to response object to that we can add application error allowcors header
create Heplers folder and create Extentions.cs class

we create extention method that allow us to add reaponse header to the response

   AddApplicationError(this HttpResponse response,string message){
       response.Headers.Add('Applicaton-Error',message);
       response.Header.Add('Access-Control-Expose-Headers','Application-Error');
       response.Headers.Add('Access-Control-Allow-Origin','*');
   }

When we get model state error we get error object  detial 
we want to handle errors globaly we have http intercepter 
create new file error.interceptor.ts
Make it injectable 
create class ErrorInterceptor inheret HttpInterceptor interface from angular common http
Shift Alt F to fix errors
implement intercept method it takes req:HttpRequest<any>,next:HttpHandler return Obseveable<HttpEvent<any>>
return handler.handle(req).then we use rxjs pipe to manuplate with result
in pipe we use catchError operator of rxjs to handle errors in observable 
catchError(take error,cought observeable)
in catchError we check if error is instance of HttpErrorResponse inside catchError we add constant 
applicationError in which we get value of Application-Error header and check if value is the we throwError
instanceof property provide the object is of that type or not 
before use this error interseptro we need to register errorInterceptor provider 
const interceptorProvider={
provide:HTTP_INTERCEPTORS,
useClass:errrorInteceptor,
multi:true
}
typeof boject provide the type of object 
 for modal state error we have error object in the requrest so if error.error is not empty and is type of object then we have to loop through the properties 
of error object and store it in string with each error on new line and then thrown throwError(error).

in order to handle unauthorize errors we have to check status of error if 401 then we throwError(statusText);

our task is to provide notification to user we use Alertyfyjs for this purpose 
in angular we have ary of httpInteceptors called HTTP_INTECEPTORS we have add our interceptor to that array 
provide useClass multi 
after adding package we have to go to angular.Json file and add Alertify.min.js file 
then we need to add css altify.min.cs file and bootstrap.min.cs file in the style.css file 
What we can do is write a wrapper on the methods of Alertifyjs in our service and use them in our program

Working on alertify 

Create new service alertify

alertify is globaly avialable but we need to declare it becaluse tslint gives warning 
declare let alertify:any;

Another library that we want to use is auth0/angular2 jwt we need it to manuplate our jwt tokens

inatalling npm install @auth0/angular-jwt

we need to define LogedIn() method in service becase if we define it in component we need to import this component in other so this is not fine
we go to auth service and import JwtHelperService and create instance of this service 

create a new method loggedIn() in auth service and get the token from localStorage then use JwtHelper.IsTokenExpired() to check token expired or not and return 
resutl with not operator 
we go back to navComponent in loggedIn method return loggedIn() of service;
we will display the name of user with welcome by decoding our token 
we create property in auth service and decodedToken and assign its value by using decodeToken(token);
we define name property required we can make it optional by using save navigation operator ?
in appcomponent we get token decode it and assign it to decodedToken Property of  authService
in alternative of JQuery we use ngx bootstrap to get the functionality in working position 
we ngx bootstrap we need to add module for each component 
to color our app we use bootswatch	
install bootswatch
after instlling bootswatch we import the bootstrap.min.css file in the script file

----working on the angular routing ----
setting up routing in angular 
create a component member list 
generate another component list
messages component

we creates a routes.ts file 
we define and export constant appRoutes of type Routes in Angular router
Routes is Array of route configuration objects 
we provide value of the array 
object contain two properties path and component 
{path:'home' , component:HomeComponent }
we can redirect to the component as 
{path:'**' , redirectTo : 'home' , pathMatch:'full'}
angular chose fist come first basis path 
Now we have to add RouterModule to our app Module 
and call the forRoot() method with value appRout 
Now configuration is complete 
adding links to our navbar
we needs to replace href to router links 
routerlink is angular directive and we have another directive routerlinkActive
Last thing we need to do is we provide router-outlet tag where we want routed component to come
use Router module to work with navigation in Component 
we have three parameters of subscribe method third one is complete where we can define our route and to do 
so we use nevigaet method of router 
syndication fields 
--Working on guarding the routs --
create new folder_guards
in command promt nevigate to guards folder 
we can create components using angular cli
we generate guard with cli ng g guard auth --spec=false
we we see pipes in return or multiple return  types this is known Union
clean route guard 
we need authService,Router,AlertifyService, 

then we go in canActivate(){
check if the user is loggedIn then return true and if user is not logged in then redirect it to Home and show error and return it to home page 
and return false

add authGuard to providers array in module
to protect add property to the Routes array object canActivate:[AuthGuard];
to protect all three routes with single guard we create one dumy rout 
path:'',
runGuardsAndResolvers=true,
canActivated:[AuthGuard],
Childeren:[
{path:'members',conponent:MembersComponents}
]
} 
we have specify '' path to home component

---Extending API User Model ----
Extending User Model 
Create Photo class 
onDelete :ReferalAction.Ristrict restrict delection and if user is deleted it set photos nevigation property to null and photo remains
Exploring Migrations
we remove migration by dotnet ef migrations remove
if we put migration name at the end of dotnet ef database update command it calls down method of migration
if we have applied wrong migrations and want to delete it first way is to revert it by dotnet ef database update migrationName.
if this not solve the problem then delete the database remove the migration and then Update the database and start working with that 
we specify the User property in photo class and UserId property this change the migration from restrict delete to cascade delete
CascADE mean if user will deleted photos also deleted
In order to get the user seeding data we can use json generator where we past the script to generate json
then copy the json and past it in json file 
we can use IO.File.ReadAllLines(filePath) method to read all file

we have create a generic repository that has add delete and getusers and get user method 


// Working on user detial page 

in order to represent images in gallary we have package called ngxGallary that help us to work with images 
properties we have use for gallery options 
height 
width , imagepercent , thumbnailscolumns , preview

images we provide small, medium large and description
we use gallery component to show images in gallery in our app 

// Working on editing user profile 

We  mostly try to build our edit component simmiler to detail page 
we can use form inline for inline form 

// Working on uploading photo 
we have use cloud storage to upload photo so its cool
in we can configure our class values on startup with configure extention of services

// Adding photo upload functionality 

ng2file Upload 

Main key is FileUploader

we need to initialize file uploader
this.uploader=new fileUploader({
url:this.baseUrl,
authToken:laodAuthToken,
isHtml5 :true,
allowedFileType:['image'],
removeAfterUpload:true,
autoUpload:false,
maxFileSize:10*1024*1024}
);

this.uploader.onFileUpload=(file)=>{
file.withCredentials=false;
};
Set main photo 
set photo in nav bar 

Using BehaviourSubject 
subject is type of observeable and it allow get to get value with out subscribe it and also alow to set vaule

Any to any component 

Photo upload functionality summary
Where to save photo
Create photo controller 
Ng2 file upload 
Set photo as main 
Array filter and splice function
many to many communication

Enhancing Registration form
To solve data error we use ngx bootstrap datepicker for consistant expirence

Action Filter and Time Ago pipe 

we can install timeagopipe for time ago functionality in app for lastactive 
Action Filter can execute code before executing action and after executing action 
we implement IAsyncActionFilter and user next method to get actionexecutedcontext and use this to get values and services 
then we add that filter to services in startup class and 
we use ServiceFilter Attribute to use that filter	